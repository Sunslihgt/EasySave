<Application x:Class="EasySave.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:fa="http://schemas.fontawesome.io/icons">
    <Application.Resources>
        <!-- Text colors -->
        <SolidColorBrush x:Key="TextColor" Color="#E5E0EF"/>
        <SolidColorBrush x:Key="TitleColor" Color="#FFFFFF"/>
        <SolidColorBrush x:Key="TextDarkColor" Color="#0A090C"/>
        <!-- Background colors -->
        <SolidColorBrush x:Key="BackgroundColor" Color="#0A090C"/>
        <SolidColorBrush x:Key="BackgroundSecondaryColor" Color="#08ffffff"/>
        <SolidColorBrush x:Key="BorderColor" Color="#444444"/>
        <!-- Accent colors -->
        <Color x:Key="PrimaryColorColor">#412083</Color>
        <SolidColorBrush x:Key="PrimaryColor" Color="{StaticResource PrimaryColorColor}"/>
        <SolidColorBrush x:Key="PrimaryFocusColor" Color="#6331C6"/>
        <SolidColorBrush x:Key="SecondaryColor" Color="#6C34DC"/>
        <SolidColorBrush x:Key="SecondaryFocusColor" Color="#9065E7"/>
        <!-- Menu colors -->
        <SolidColorBrush x:Key="MenuButtonColor" Color="{StaticResource PrimaryColorColor}"/><!-- #1B142A -->
        <!-- Progress bar colors -->
        <SolidColorBrush x:Key="ProgressBar.Progress" Color="{StaticResource PrimaryColorColor}"/>
        <SolidColorBrush x:Key="ProgressBar.Background" Color="#D9D9D9"/>
        <SolidColorBrush x:Key="ProgressBar.Border" Color="#00000000"/>
        <!-- TextBox color-->
        <SolidColorBrush x:Key="TextBoxColor" Color="#333333"/>

        <!-- Default buttons -->
        <Style x:Key="PrimaryButtonStyle" TargetType="Button">
            <Setter Property="Height" Value="45"/>
            <Setter Property="Margin" Value="5"/>
            <Setter Property="Padding" Value="10,5"/>
            <Setter Property="FontSize" Value="14"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="Background" Value="{StaticResource PrimaryColor}"/>
            <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
            <Setter Property="BorderBrush" Value="Transparent"/>
            <Setter Property="Cursor" Value="Hand"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}" CornerRadius="5" Padding="{TemplateBinding Padding}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource PrimaryFocusColor}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="SecondaryButtonStyle" TargetType="Button" BasedOn="{StaticResource PrimaryButtonStyle}">
            <Setter Property="Background" Value="{StaticResource SecondaryColor}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource SecondaryFocusColor}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Square buttons -->
        <Style x:Key="PrimarySquareButtonStyle" TargetType="Button" BasedOn="{StaticResource PrimaryButtonStyle}">
            <Setter Property="Margin" Value="5,5,0,5"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Width" Value="30"/>
            <Setter Property="Height" Value="30"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <Style x:Key="SecondarySquareButtonStyle" TargetType="Button" BasedOn="{StaticResource PrimarySquareButtonStyle}">
            <Setter Property="Background" Value="{StaticResource SecondaryColor}"/>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{StaticResource SecondaryFocusColor}"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <!-- Menu buttons-->
        <Style x:Key="PrimaryMenuButtonStyle" TargetType="Button" BasedOn="{StaticResource PrimaryButtonStyle}">
            <Setter Property="Background" Value="{StaticResource MenuButtonColor}"/>
            <Setter Property="Padding" Value="0"/>
            <Setter Property="Height" Value="25"/>
            <Setter Property="HorizontalAlignment" Value="Stretch"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="FontWeight" Value="DemiBold"/>
        </Style>

        <!-- Large Section -->
        <Style x:Key="SectionStyle" TargetType="Border">
            <Setter Property="Background" Value="{StaticResource BackgroundSecondaryColor}"/>
            <Setter Property="CornerRadius" Value="10"/>
        </Style>
        
        <!-- TextBox -->
        <Style x:Key="TextBoxStyle" TargetType="TextBox">
            <Setter Property="Height" Value="30"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="Foreground" Value="{StaticResource TextColor}"/>
            <Setter Property="Background" Value="{StaticResource TextBoxColor}"/>
            <Setter Property="BorderBrush" Value="{StaticResource BorderColor}"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>

        <Style x:Key="LanguageWindowTextBlockStyle" TargetType="TextBlock">
            <Setter Property="FontSize" Value="18"/>
            <Setter Property="FontWeight" Value="Bold"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="Margin" Value="0,15,0,8"/>
        </Style>

        <Style x:Key="LanguageComboBoxStyle" TargetType="ComboBox">
            <Setter Property="Background" Value="{StaticResource TextBoxColor}"/>
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="Width" Value="180"/>
            <Setter Property="Margin" Value="0,0,0,15"/>
        </Style>

        <Style x:Key="CenterAlignedTextCellStyle" TargetType="DataGridCell">
            <Setter Property="HorizontalAlignment" Value="Center"/>
            <Setter Property="VerticalAlignment" Value="Center"/>
        </Style>
        
        <!-- Progressbar -->
        <Style x:Key="ProgressBarStyle" TargetType="{x:Type ProgressBar}">
        <Setter Property="Foreground" Value="{StaticResource ProgressBar.Progress}"/>
        <Setter Property="Background" Value="{StaticResource ProgressBar.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ProgressBar.Border}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ProgressBar}">
                    <Grid x:Name="TemplateRoot">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Determinate"/>
                                <VisualState x:Name="Indeterminate">
                                    <Storyboard RepeatBehavior="Forever">
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="0.25"/>
                                            <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.25"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <PointAnimationUsingKeyFrames Storyboard.TargetName="Animation" Storyboard.TargetProperty="(UIElement.RenderTransformOrigin)">
                                            <EasingPointKeyFrame KeyTime="0" Value="-0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:1" Value="0.5,0.5"/>
                                            <EasingPointKeyFrame KeyTime="0:0:2" Value="1.5,0.5"/>
                                        </PointAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="5"/>
                        <Rectangle x:Name="PART_Track"/>
                        <Grid x:Name="PART_Indicator" ClipToBounds="true" HorizontalAlignment="Left">
                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}" RadiusX="5" RadiusY="5"/>
                            <Rectangle x:Name="Animation" Fill="{TemplateBinding Foreground}" RenderTransformOrigin="0.5,0" RadiusX="5" RadiusY="5">
                                <Rectangle.RenderTransform>
                                    <TransformGroup>
                                        <ScaleTransform/>
                                        <SkewTransform/>
                                        <RotateTransform/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Rectangle.RenderTransform>
                            </Rectangle>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Orientation" Value="Vertical">
                            <Setter Property="LayoutTransform" TargetName="TemplateRoot">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsIndeterminate" Value="true">
                            <Setter Property="Visibility" TargetName="Indicator" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    </Application.Resources>
</Application>
